<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1486427957063">{:repl-history {:ide [], :local [&quot;(saver [4 \&quot;neee\&quot; \&quot;neeee\&quot; 300 \&quot;2015-02-02\&quot;])&quot; &quot;(saver [4][ \&quot;neee\&quot; \&quot;neeee\&quot; 300 \&quot;2015-02-02\&quot;])&quot; &quot;(ns taxif.db.core\n  (:require [clojure.java.jdbc :as sql]\n            [config.core :refer [env]]\n    [yesql.core :refer [defqueries]]\n            ))&quot; &quot;(def db-spec {:classname \&quot;org.h2.Driver\&quot;\n              :connection-uri (:database-url env)\n              :make-pool? true\n              :naming {:keys clojure.string/lower-case\n                       :fields clojure.string/upper-case}})&quot; &quot;(defqueries \&quot;sql/queries.sql\&quot; {:connection db-spec})&quot; &quot;(defn saver\n\n  [id params]\n  (sql/update! db-spec :routes params [\&quot;id=?\&quot; id] )\n\n  )&quot; &quot;(defn saver\n           [id ]\n           (sql/execute! db-spec [\&quot;UPDATE routes set start=?, end=?, price=?, date=? , WHERE id=? \&quot; id ])\n\n           )&quot; &quot;(saver [4])&quot; &quot;(defn saver\n          [start end price date id]\n          (sql/db-do-commands  db-spec  [\&quot;update routes SET start=?, end=?, price=?, date=?  WHERE id=?\&quot; id  start end price date])\n\n\n          )&quot; &quot;(saver [\&quot;start\&quot; \&quot;end\&quot; 4 \&quot;2014-02-02\&quot; 4])&quot; &quot;(defn saver [start end price date id]\n\n  (assoc {:start start :end end :price price :date date :id id} {:start start :end end :price price :date date :id id})\n  )&quot; &quot;(saver \&quot;start\&quot; \&quot;end\&quot; 399 \&quot;2013-02-02\&quot;)&quot; &quot;(defn update!\n         [id start end price date]\n\n         (sql/update! db-spec :routes [\&quot;id=?\&quot; id] {:start start :end end :price price :date date}))&quot; &quot;(defn saver\n         [id start end price date]\n\n         (sql/update! db-spec :routes [\&quot;id=?\&quot; id] {:start start :end end :price price :date date}))&quot; &quot;(saver [4] { \&quot;start\&quot; \&quot;end\&quot; 300 \&quot;2013-02-02\&quot;})&quot; &quot;(saver 4  \&quot;start\&quot; \&quot;end\&quot; 300 \&quot;2013-02-02\&quot;)&quot; &quot;(defn  saver\n          [start end price date id]\n          (sql/db-do-commands  db-spec  [\&quot;update routes SET start=?, end=?, price=?, date=?  WHERE id=?\&quot; id  start end price date])\n\n\n          )&quot; &quot;(saver \&quot;start\&quot; \&quot;end\&quot; 300 \&quot;2013-02-02\&quot; 4)&quot; &quot;(defn saver!  [id start end price date]\n  (sql/update! db-spec :routes   {:start start :end end :price price :date date}  [\&quot;id=?\&quot; id]\n               \n\n  )      )&quot; &quot;(saver 4 \&quot;eeee\&quot; \&quot;eeeee\&quot; 3 \&quot;2012-02-02\&quot;)&quot; &quot;(saver! 4 \&quot;eeee\&quot; \&quot;eeeee\&quot; 3 \&quot;2012-02-02\&quot;)&quot; &quot;(defn update-route-results-page\n  [{:keys [id start end price date ]}]\n  (let [ide (db/saver! id start end price date)]\n    (hic-p/html5\n      (gen-page-head \&quot;Updated Routes\&quot;)\n      header-links\n      [:h1 \&quot;Route is saved\&quot;\n       [:p \&quot;Route: \&quot; ]\n       [:p \&quot;Start Point:\&quot; start ]\n       [:p \&quot;End Point:\&quot; end ]\n       [:p \&quot;Price: \&quot; price]\n       [:p \&quot;Date: \&quot; date ]\n       [:p \&quot;ID: \&quot; id ]\n       [:p[:a {:href (str \&quot;/route/\&quot; ide)} \&quot;View Entry\&quot;]]\n       ])))&quot; &quot;(defn update-route-results-page\n  [{:keys [id start end price date ]}]\n  (do (db/saver! id start end price date )\n    (hic-p/html5\n      (gen-page-head \&quot;Added Routes\&quot;)\n      header-links\n      [:h1 \&quot;Route is saved\&quot;\n       [:p \&quot;Route: \&quot; id ]\n       [:p \&quot;Start Point:\&quot;  ]\n       [:p \&quot;End Point:\&quot;  ]\n       [:p \&quot;Price: \&quot; ]\n       [:p \&quot;Date: \&quot;  ]\n       [:p \&quot;ID: \&quot; id ]\n       ]\n       )    )   )&quot; &quot;(defn update-route-results-page\n  [{:keys [id start end price date ]}]\n  (do (db/saver! id start end price date )\n      (println id start end price date)\n\n    (hic-p/html5\n      (gen-page-head \&quot;Added Routes\&quot;)\n      header-links\n      [:h1 \&quot;Route is saved\&quot;\n       [:p \&quot;Route: \&quot; id ]\n       [:p \&quot;Start Point:\&quot;  ]\n       [:p \&quot;End Point:\&quot;  ]\n       [:p \&quot;Price: \&quot; ]\n       [:p \&quot;Date: \&quot;  ]\n       [:p \&quot;ID: \&quot; id ]\n       ]\n       )    )   )&quot; &quot;(use 'taxiapp.views)&quot; &quot;(defn update-route-results-page\n  [id start end price date ]\n  (do (db/saver! id start end price date )\n      (println id start end price date)\n\n    (hic-p/html5\n      (gen-page-head \&quot;Added Routes\&quot;)\n      header-links\n      [:h1 \&quot;Route is saved\&quot;\n       [:p \&quot;Route: \&quot; id ]\n       [:p \&quot;Start Point:\&quot;  ]\n       [:p \&quot;End Point:\&quot;  ]\n       [:p \&quot;Price: \&quot; ]\n       [:p \&quot;Date: \&quot;  ]\n       [:p \&quot;ID: \&quot; id ]\n       ]\n       )    )   )&quot; &quot;(update-route-results-page 3 \&quot;start\&quot; \&quot;end\&quot; 300 \&quot;2013-02-02\&quot;)&quot; &quot;(defn  saver!\n          [id]\n          (sql/db-do-prepared  db-spec  [\&quot;update routes SET start=?, end=?, price=?, date=?  WHERE id in (?)\&quot; id ])\n\n\n          )&quot; &quot;(cc/defroutes app-routes\n              (cc/GET \&quot;/\&quot;\n                      []\n                (views/home-page))\n\n              ;add\n              (cc/GET \&quot;/add-route\&quot;\n                      []\n                (views/add-routes-page))\n\n              ;(cc/POST \&quot;/add-route\&quot; request (views/add-route-results-page request))\n\n             (cc/POST \&quot;/add-route\&quot;\n               {params :params}\n              (views/add-route-results-page params)\n             )\n\n              ;single rroute view\n              (cc/GET \&quot;/route/\&quot;\n                      [id]\n                (views/route-page id))\n\n              ;delete\n\n              (cc/GET \&quot;/route-del/:id\&quot; [id]\n\n                (views/route-del id)\n\n                )\n\n\n              ;Edit &amp; Update\n              (cc/GET \&quot;/update-route/:id\&quot; [id ]\n                (views/route-update-page id\n                                         ))                 ; working\n\n\n              (cc/POST \&quot;/update-route/save\&quot;  [id start end price date ]   ;not-working   !!!\n              (get id  (do (db/saver! id start end price date )\n                    (resp/redirect \&quot;/all-routes\&quot;)     )\n                    ;{params :params  }\n                    ;\n                    ; (views/update-route-results-page params\n                    ))\n\n              (comment  cc/POST \&quot;/update-route/save\&quot;    [ &amp; params]                                      ;not working\n                {params :params}\n                (db params\n                                                 ) )\n\n              ; all\n              (cc/GET \&quot;/all-routes\&quot;\n                      []\n                (views/all-routes-page))\n              (route/resources \&quot;/\&quot;)\n              (route/not-found \&quot;Not Found\&quot;))&quot; &quot;(defn saver!  [id start end price date]\n  (let [results (sql/update! db-spec :routes   {:start start :end end :price price :date date}  [\&quot;id=?\&quot; id   ]\n                             \n\n  )  (assert (= (count results) 1))\n        (first (vals results))    ])   )&quot; &quot;(defn saver!  [id start end price date]\n  (sql/update! db-spec :routes   {:start start :end end :price price :date date}  {:id id}\n\n\n  )      )&quot; &quot;(db/saver! id start end price date)&quot; &quot;(use 'taxif.views)&quot; &quot;(defn update-route-results-page\n  [{:keys [id start end price date ]}]\n  (let [id (db/saver! id start end price date)]\n    (hic-p/html5\n      (gen-page-head \&quot;Updated Routes\&quot;)\n      header-links\n      [:h1 \&quot;Route is saved\&quot;\n       [:p \&quot;Route: \&quot; ]\n       [:p \&quot;Start Point:\&quot; start ]\n       [:p \&quot;End Point:\&quot; end ]\n       [:p \&quot;Price: \&quot; price]\n       [:p \&quot;Date: \&quot; date ]\n       [:p \&quot;ID: \&quot; id ]\n       [:p[:a {:href (str \&quot;/route/\&quot; id)} \&quot;View Entry\&quot;]]\n       ])))&quot; &quot;(update-route-results-page :id 4 :start \&quot;start\&quot; :end \&quot;end\&quot; :price 300 :date \&quot;2013-01-01\&quot;)&quot; &quot;(update-route-results-page  4  \&quot;start\&quot; \&quot;end\&quot;  300  \&quot;2013-01-01\&quot;)&quot; &quot;(defn update-route-results-page\n   [id start end price date ]\n  (let [id (db/saver! id start end price date)]\n    (hic-p/html5\n      (gen-page-head \&quot;Updated Routes\&quot;)\n      header-links\n      [:h1 \&quot;Route is saved\&quot;\n       [:p \&quot;Route: \&quot; ]\n       [:p \&quot;Start Point:\&quot; start ]\n       [:p \&quot;End Point:\&quot; end ]\n       [:p \&quot;Price: \&quot; price]\n       [:p \&quot;Date: \&quot; date ]\n       [:p \&quot;ID: \&quot; id ]\n       [:p[:a {:href (str \&quot;/route/\&quot; id)} \&quot;View Entry\&quot;]]\n       ])))&quot; &quot;(use 'taxif.db.core)&quot; &quot;(defn saver!  [id start end price date]\n  (sql/update! db-spec :routes   {:start start :end end :price price :date date}  [\&quot;id=?\&quot; id]\n\n\n  )      )&quot; &quot;(saver! 4 \&quot;be\&quot; \&quot;be\&quot; 300 \&quot;2012-01-01\&quot; )&quot; &quot;(get-route 4)&quot;], :remote []}}</component>
</project>